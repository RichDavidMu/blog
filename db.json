{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":0},{"_id":"source/img/favicon.jpg","path":"img/favicon.jpg","modified":0,"renderable":0},{"_id":"source/img/bg/nav1.jpg","path":"img/bg/nav1.jpg","modified":0,"renderable":0},{"_id":"source/img/bg/nav4.jpg","path":"img/bg/nav4.jpg","modified":0,"renderable":0},{"_id":"source/img/bg/nav3.jpg","path":"img/bg/nav3.jpg","modified":0,"renderable":0},{"_id":"source/img/bg/nav2.jpg","path":"img/bg/nav2.jpg","modified":0,"renderable":0},{"_id":"source/img/bg/nav5.jpg","path":"img/bg/nav5.jpg","modified":0,"renderable":0},{"_id":"source/img/bg/nav6.jpg","path":"img/bg/nav6.jpg","modified":0,"renderable":0},{"_id":"source/img/blogCovers/blog-post3.jpg","path":"img/blogCovers/blog-post3.jpg","modified":0,"renderable":0},{"_id":"source/img/blogCovers/blog-post1.jpg","path":"img/blogCovers/blog-post1.jpg","modified":0,"renderable":0},{"_id":"source/img/blogCovers/blog-post5.jpg","path":"img/blogCovers/blog-post5.jpg","modified":0,"renderable":0},{"_id":"source/img/blogCovers/blog-post4.jpg","path":"img/blogCovers/blog-post4.jpg","modified":0,"renderable":0},{"_id":"source/img/blogCovers/blog-post6.png","path":"img/blogCovers/blog-post6.png","modified":0,"renderable":0},{"_id":"source/img/blogCovers/js1.jpg","path":"img/blogCovers/js1.jpg","modified":0,"renderable":0},{"_id":"source/img/blogCovers/js2.jpg","path":"img/blogCovers/js2.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/_posts/Javascript学习笔记.md","hash":"e872927c88d57b441c4cb427a585b6c2b385565e","modified":1634978026716},{"_id":"source/about/index.md","hash":"0be97474181469a91ee9ed5d8722ec751ac941aa","modified":1634978243248},{"_id":"source/img/favicon.jpg","hash":"7aed5a29b82ecd98b4c0a307680f51109890761b","modified":1634482518345},{"_id":"source/img/blogCovers/blog-post3.jpg","hash":"50bcfcfc1fcdff2df692099e064a3d47895c072a","modified":1634977915520},{"_id":"source/img/blogCovers/blog-post1.jpg","hash":"6599bfc75d9806876eeb2a0db2a9f3d53672c03a","modified":1634977929107},{"_id":"source/img/blogCovers/blog-post5.jpg","hash":"328f407de31d624e57f77b6c31db15b95e1a04aa","modified":1634977960618},{"_id":"source/img/blogCovers/blog-post4.jpg","hash":"73047d4e267626bfa6f74ad3da362eca3e194a50","modified":1634977940505},{"_id":"source/img/blogCovers/js1.jpg","hash":"f714f5ed139d2a608d2c733a17b88f464ad96c1b","modified":1634977870644},{"_id":"source/img/blogCovers/js2.jpg","hash":"4d3d3f43a782313b73745b2f179e8866af302eb0","modified":1634977900525},{"_id":"source/img/blogCovers/blog-post6.png","hash":"d5d04479ecffdd8c21ea8e34240021d48121e5a7","modified":1634977950950},{"_id":"source/img/avatar.png","hash":"973acae3678424ac46d08d0fbdac80ddeee52a82","modified":1634483159660},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"source/img/bg/nav4.jpg","hash":"7e74c6ea89648516cbc2da2cd795f6e26c209400","modified":1634481591709},{"_id":"node_modules/hexo-theme-fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"03cfa8e5f149514b57ef80dcb84eb7fea261370d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"cd5cbd070b6190aa0b4839400c0a1581e2654470","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"4d7d4f7a9ff88e35779b2585f8236cd1de3f0123","modified":1634479183455},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"20c2a195a109d2a263b5fa6e79cbcc62932508ad","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"666476260a2cead2cc2928d51977c4a7ba8de6bb","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"7f566edf750241e62d7c54abfbb0c504fdab850a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"2a7b49f0f9aecf07550b5a0b99242aab5654cf2b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/archive-list.ejs","hash":"53a4f6029373a40394a87aba9284696a71610f90","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/beian.ejs","hash":"58b4bbe36386de4305a8da5ffd7d56802df23049","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/css.ejs","hash":"c363829a4b80f74fc1c565e41f6dab41c95006ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/footer.ejs","hash":"a62278c38a310da495d96c39abacacef266945cb","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/head.ejs","hash":"7d0cf31f2595cfe6d5ad31d569654f21a00dfd77","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/nav.ejs","hash":"e71b3c4aa263163597d31b1f91e5a1a877084cfd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/post-meta.ejs","hash":"32a17edadeed40da6db21d2d8031bd47d2fc9bf4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/scripts.ejs","hash":"0ee838b6fcd895d21a29d9d67dbb99b752d623d1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"cde964c8cd3217268a231de5e018a62c53c2e047","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"3aa5b4ea879cd34d3a32468d88da18d72cbcc8e0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"8e33f915028ac56258f6999d19b1ad8d800cecfe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"4a787cfce27045aa0a92ec22e84f2ccf30cabc4c","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/twikoo.ejs","hash":"1af53bc0be642610a3a4d4e7c05287854a821508","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/valine.ejs","hash":"4052ab2a8f78efa92f0fe17abe8f66135943390a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/comments/waline.ejs","hash":"21e00443054802e893aac1f668b69d5bb4b39b3a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/math.ejs","hash":"a7ed1d3079c32497c8955ca75f5fb6992e5ffb8b","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/layout/_partial/plugins/typed.ejs","hash":"ece659572cf4e12638a1607fca512c25098bbd82","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"63aedd67d90d641cc672540db20ef615f528c9f1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"cd55a2dce6b9d3e165a0a26d0b5bf7f649006bcd","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"616c1f7147078c3d532dd1cfd2af09c0c3a816f0","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/rewrite.styl","hash":"c66e0da2c0d05e76a686a77ab4e74f0d2e89777d","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"7e32a3268accf3d524209c213e15e2d5d5e2e1a6","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/tag_plugin.styl","hash":"b89b96c8a6a433a6f372b42710554b05cab85a24","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"0ce7552dc4993926426019398d73e817cfd841a1","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":499162500000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":499162500000},{"_id":"source/img/bg/nav2.jpg","hash":"36ecf31be3bad17908f260ed84c7e1b1e502664d","modified":1634481624455},{"_id":"source/img/bg/nav1.jpg","hash":"7841316dd7f8b19e3842c194d8723455d1bcfde6","modified":1634481640716},{"_id":"source/img/bg/nav6.jpg","hash":"8ace282145a2045e36229a0d27e45d90445828da","modified":1634482054150},{"_id":"source/img/bg/nav5.jpg","hash":"e9b8d941fde52c4b11ae98f8c9494b7b2785a6d9","modified":1634481734419},{"_id":"source/img/bg/nav3.jpg","hash":"d217bbe85b853adf4e8f869f10788399953c56cf","modified":1634481728736},{"_id":"public/local-search.xml","hash":"b722a5d6653ede3e09e0631981c1c5efb90f4403","modified":1635091762678},{"_id":"public/about/index.html","hash":"0daf2fa46c9578a1a58718c19cdf8b808b86b11e","modified":1635091762678},{"_id":"public/archives/index.html","hash":"89a8aafc2da831759714be5dda076e7c2c26e807","modified":1635091762678},{"_id":"public/archives/2020/index.html","hash":"b7488fa89915b53be18a73a05730bb718fdb6f9d","modified":1635091762678},{"_id":"public/archives/2020/02/index.html","hash":"1b972e6c1c44bff5635419b7e9eedad21c3bc2da","modified":1635091762678},{"_id":"public/categories/学习笔记/index.html","hash":"9dd8d6d59b1e3b188b6e23ecd0d87de8d61e0ee1","modified":1635091762678},{"_id":"public/tags/JavaScript/index.html","hash":"ed0698227d2fc09970ed4af3142b1563c7e0c8d1","modified":1635091762678},{"_id":"public/index.html","hash":"cfbd3a8d48c7628bfe5cf8f651c9652898c68875","modified":1635091762678},{"_id":"public/404.html","hash":"fb329fd24b12798015a552d31b9ca6e572d2cbbd","modified":1635091762678},{"_id":"public/tags/index.html","hash":"17213e4f6f4de091da21f7d40b9dd616a072d818","modified":1635091762678},{"_id":"public/categories/index.html","hash":"947831a377a80b7f2d375d0933f861acb27902a4","modified":1635091762678},{"_id":"public/links/index.html","hash":"ff3c17e2f8d9b7d327b90e56df7c79171bb0f6f8","modified":1635091762678},{"_id":"public/2020/02/11/Javascript学习笔记/index.html","hash":"61820013562cfb856267935caebb78d8bfc6a8ba","modified":1635091762678},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1635091762678},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1635091762678},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1635091762678},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1635091762678},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1635091762678},{"_id":"public/img/favicon.jpg","hash":"7aed5a29b82ecd98b4c0a307680f51109890761b","modified":1635091762678},{"_id":"public/img/blogCovers/blog-post3.jpg","hash":"50bcfcfc1fcdff2df692099e064a3d47895c072a","modified":1635091762678},{"_id":"public/img/blogCovers/blog-post1.jpg","hash":"6599bfc75d9806876eeb2a0db2a9f3d53672c03a","modified":1635091762678},{"_id":"public/img/blogCovers/blog-post5.jpg","hash":"328f407de31d624e57f77b6c31db15b95e1a04aa","modified":1635091762678},{"_id":"public/img/blogCovers/blog-post4.jpg","hash":"73047d4e267626bfa6f74ad3da362eca3e194a50","modified":1635091762678},{"_id":"public/img/blogCovers/js1.jpg","hash":"f714f5ed139d2a608d2c733a17b88f464ad96c1b","modified":1635091762678},{"_id":"public/img/blogCovers/js2.jpg","hash":"4d3d3f43a782313b73745b2f179e8866af302eb0","modified":1635091762678},{"_id":"public/img/blogCovers/blog-post6.png","hash":"d5d04479ecffdd8c21ea8e34240021d48121e5a7","modified":1635091762678},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1635091762678},{"_id":"public/js/color-schema.js","hash":"2520c6459b544a4e965b838f8095e2a84390a43c","modified":1635091762678},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1635091762678},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1635091762678},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1635091762678},{"_id":"public/js/leancloud.js","hash":"4a787cfce27045aa0a92ec22e84f2ccf30cabc4c","modified":1635091762678},{"_id":"public/js/local-search.js","hash":"633f0142c657805359b0197f287e12ae4bcde731","modified":1635091762678},{"_id":"public/js/plugins.js","hash":"d058f30bd09b28769c4d8313428ff23dfc8d52dd","modified":1635091762678},{"_id":"public/js/utils.js","hash":"4a43f2700e91937650bef511fd438825b001c4c6","modified":1635091762678},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1635091762678},{"_id":"public/css/main.css","hash":"80b7c3dc3f47db8b700b4437bdf45706fe504f66","modified":1635091762678},{"_id":"public/img/avatar.png","hash":"973acae3678424ac46d08d0fbdac80ddeee52a82","modified":1635091762678},{"_id":"public/img/bg/nav4.jpg","hash":"7e74c6ea89648516cbc2da2cd795f6e26c209400","modified":1635091762678},{"_id":"public/img/bg/nav2.jpg","hash":"36ecf31be3bad17908f260ed84c7e1b1e502664d","modified":1635091762678},{"_id":"public/img/bg/nav1.jpg","hash":"7841316dd7f8b19e3842c194d8723455d1bcfde6","modified":1635091762678},{"_id":"public/img/bg/nav6.jpg","hash":"8ace282145a2045e36229a0d27e45d90445828da","modified":1635091762678},{"_id":"public/img/bg/nav5.jpg","hash":"e9b8d941fde52c4b11ae98f8c9494b7b2785a6d9","modified":1635091762678},{"_id":"public/img/bg/nav3.jpg","hash":"d217bbe85b853adf4e8f869f10788399953c56cf","modified":1635091762678}],"Category":[{"name":"学习笔记","_id":"ckv5ff35w0002xgep6dqgdmdf"}],"Data":[],"Page":[{"title":"about","date":"2021-10-17T14:03:14.000Z","layout":"about","_content":"写博客是想记录一些学习心得，因为用自己思路写的东西，再去回头看会省去很多理解的时间。\n\n如果你能在这里有所收获，那我荣幸之至，想和我交流，可以在每一篇文章下面留言。\n\n技术上目前涉足JavaScript/React/Vue/Pixi等。\n\n博客主题来自[Fluid](https://github.com/fluid-dev/hexo-theme-fluid)主题，非常感谢制作者的分享，希望自己以后也能设计出这么美的主题。","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-10-17 22:03:14\nlayout: about\n---\n写博客是想记录一些学习心得，因为用自己思路写的东西，再去回头看会省去很多理解的时间。\n\n如果你能在这里有所收获，那我荣幸之至，想和我交流，可以在每一篇文章下面留言。\n\n技术上目前涉足JavaScript/React/Vue/Pixi等。\n\n博客主题来自[Fluid](https://github.com/fluid-dev/hexo-theme-fluid)主题，非常感谢制作者的分享，希望自己以后也能设计出这么美的主题。","updated":"2021-10-23T08:37:23.248Z","path":"about/index.html","comments":1,"_id":"ckv5ff35p0000xgep040f6ezj","content":"<p>写博客是想记录一些学习心得，因为用自己思路写的东西，再去回头看会省去很多理解的时间。</p>\n<p>如果你能在这里有所收获，那我荣幸之至，想和我交流，可以在每一篇文章下面留言。</p>\n<p>技术上目前涉足JavaScript/React/Vue/Pixi等。</p>\n<p>博客主题来自<a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">Fluid</a>主题，非常感谢制作者的分享，希望自己以后也能设计出这么美的主题。</p>\n","site":{"data":{}},"wordcount":157,"excerpt":"","more":"<p>写博客是想记录一些学习心得，因为用自己思路写的东西，再去回头看会省去很多理解的时间。</p>\n<p>如果你能在这里有所收获，那我荣幸之至，想和我交流，可以在每一篇文章下面留言。</p>\n<p>技术上目前涉足JavaScript/React/Vue/Pixi等。</p>\n<p>博客主题来自<a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">Fluid</a>主题，非常感谢制作者的分享，希望自己以后也能设计出这么美的主题。</p>\n"}],"Post":[{"title":"Javascript学习笔记","date":"2020-02-11T08:26:09.000Z","index_img":"/img/blogCovers/js1.jpg","_content":"\n打算把最近学习的JavaScript写个博客整理记录一下，学习方式是《JavaScript语言精粹》这本书和[廖雪峰的博客](https://www.liaoxuefeng.com/wiki/1022910821149312)，不太明白的地方会去看《JavaScript权威指南》、[JavaScript|MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)和[W3School](https://www.w3school.com.cn/js/index.asp)。\n## 数据类型\nJavaScript 变量能够保存多种数据类型：数值、字符串值、数组、对象等等：\n### Numbers\nJavaScript只有一种数字类型，不区分整型与浮点型，存储方式使用64位浮点数，1和1.0的值是相同的。\n```javascript\n123; // 整数123\n0.456; // 浮点数0.456\n1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5\n-99; // 负数\nNaN; // NaN表示Not a Number，当无法计算结果时用NaN表示，可以用isNaN检测NaN\nInfinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity\n```\n可以操作数字的方法 \n- 五个number方法 [查看](https://www.w3school.com.cn/js/js_number_methods.asp)\n\t* 将数字以字符串返回：`number.toString(radix)`,`radix`控制进制，默认十进制。\n\t* 将number转换为一个十进制形式的字符串，保留`fractionDigits`位小数（多余的四舍五入）：`number.toFixed(fractionDigits)`\n\t* 将number转换成为一个指数形式的字符串，保留`fractionDigits`位小数（多余的四舍五入）`number.toExponential（fractionDigits）`\n\t* 将number转换为一个十进制形式的字符串，保留`precision`个有效数字（多余的四舍五入）：`number.toPrecision(precision)`\n- 三个全局方法 [查看](https://www.w3school.com.cn/js/js_number_methods.asp)\n  * 可以将x转换为数字，x为任意JavaScript变量（日期，布尔值等）：`Number(x)`\n  * 解析一段字符串并返回整型数值（向下取整）。允许空格。只返回首个数字： `parseInt(string)`\n  * 解析一段字符串并返回数值。允许空格。只返回首个数字：`parseFloat(string)`\n- math对象方法执行数学数学任务 [查看](https://www.w3school.com.cn/js/js_math.asp)\n  * 返回x的四舍五入：`Math.round(x)`\n  * 返回x的y次幂：`Math.pow(x,y)`\n  * 返回x的平方根：`Math.sqrt(x)`\n  * 返回x的绝对值：`Math.abs(x)`\n  * x向上取整：`Math.ceil(x)`，x向下取整：`Math.floor(x)`\n  * x正弦余弦：`Math.sin(x)` , `Math.cos(x)`\n  * 最大最小值：`Math.min(1,,2,3,4) //1` ，`Math.max(1,2,3,4) //4`,[用于数组](https://www.cnblogs.com/lguow/p/9725258.html)\n  * 返回一个0-1的随机数：`Math.random()`，更多[随机数trick](https://www.w3school.com.cn/js/js_random.asp)\n\n### Strings\nJavaScript的字符串就是用`' '`或`\" \"`括起来的字符\n例：\n```javascript\n'I\\'m \\\"OK\\\"!';\n```\n含义`I'm \"OK\"!`\n>字符串一旦创建就不能改变，可以使用字符串方法操作返回新的字符串\n\n`\\`是转义字符 \n\n```javascript\n'A' === '\\u0041'; //true\n```\nstring有`length`属性\n```javascript\n'seven'.length; //5\n```\n可以用`+`号连接其他字符串来创建一个新的字符串\n```javascript\n'c'+'a'+'t' ==='cat'; //true\n```\nstring拥有方法 [查看](https://www.w3school.com.cn/js/js_string_methods.asp)\n\n+ 查找：`string.indexOf(searchString,position)` , `string.lastIndexOf(seachString,position)` , `string.search(regexp)`.\n`searchString`要搜索的字符串，`position`开始搜索的位置，`regexp`正则表达式对象，以number返回位置\n\n\t>  两种方法，`string.indexOf()` 与 `string.search()`，是相等的。\n\t> \n\t> 这两种方法是不相等的。区别在于：\n\t> \n\t> `string.search()` 方法无法设置第二个开始位置参数。 `string.indexOf()` 方法无法设置更强大的搜索值（正则表达式）。\n+ 提取字符：`string.charAt(position)` 方法返回字符串中指定下标（位置）的字符串。\n`string.charCodeAt(position)`方法返回字符串中指定索引的字符 unicode 编码，常用此方法建造哈希表，相反`string.fromCharCode(charCode...)`根据编码返回字符串\n\n\t>ECMAScript 5 (2009) 允许对字符串的属性访问 `[ ]`，如`str[0]`\n\t>用属性访问有点不太靠谱：\n\t> \n\t> 不适用 Internet Explorer 7 或更早的版本 它让字符串看起来像是数组（其实并不\t是） 如果找不到字符，`[ ]` 返回 `undefined`，而 `charAt()` 返回空字符串。 \n\t> 它是只读的。`str[0] = \"A\"` 不会产生错误（但也不会工作！）\n\t> 如果您希望按照数组的方式处理字符串，可以先把它转换为数组。\n+ 把字符串转换为数组：`string.split(separator,limit)`\n以`separator`分割，改参数可以是字符串或正则表达式，`limit`限制被分割的片段数量，返回元素为字符串的数组。\n+ 提取字符串：`string.slice(start, end)`，`string.substring(start, end)`，`string.substr(start, length)`\n`start`**开始**提取位置，`end`**最后**一个字符的位置，如果为负数则与`string.length`相加，即倒数位置，`length`要提取的字符串**长度**。\n不改变原字符串，将提取结果以新字符串返回。\n\n\t> `substring()` 类似于 `slice()`。不同之处在于 `substring()` 无法接受负的索引。\n\t> `substr()` 类似于 `slice()`。不同之处在于第二个参数规定被提取部分的长度。\n+ 替换：`replace(seachValue,replaceValue)`\n`seachValue`可以是**字符串**或**正则表达式**，`replaceValue`可以是**字符串**或一个**函数**。\n当`replaceValue`是一个**字符串**，字符`$`拥有特别含义：\n\n\t```javascript\n\tvar oldareacode = /\\((\\d{3})\\)/g;\n\tvar p = '(555)666-1212'.replace(oldareacode,'$1-');\n\t//p 是 '555-666-1212'\n\t```\n\t美元符号序列 |替换对象\n\t----|-----\n\t$`$$`|$\n\t$`$&`|整个匹配文本\n\t$`$number`|分组捕获的文本\n\t$``$` ``|匹配之前的文本\n\t$`$'`|匹配之后的文本\n\n\t如果`replaceValue`是一个**函数**，那么每次遇到一次匹配函数就会调用一次，该函数返回的字符串用作替换文本，在下一个参数是分组2捕获的文本、\n\t\n\n\t```javascript\n\tvar old = 'hello World';\n\tvar p = old.replace('hello',function (c){\n    \tconsole.log(c);//hello\n    \treturn 'Hello'    \n\t\t})\n\tconsole.log(p);//Hello World\n\t```\n\n\t>`replace()` 只替换首个匹配\n\t>默认地，`replace()` 对大小写敏感。\n\t>如需执行大小写不敏感的替换，请使用正则表达式 `/i`,请注意正则表达式不带引号。如：`replace(/he/i,'she')`\n\t>如需替换所有匹配，请使用正则表达式的 `/g` 标志（用于全局搜索)。如：`replace(/he/g,'she')`\n+ 转换大小写：`toUpperCase()`,`toLowerCase()`\n+ 连接字符串：`concat()`与`+`等效\n+ 删除字符串两端的空白符：`String.trim()`\n\t> Internet Explorer 8 或更低版本不支持 `trim()` 方法。\n\t> 如需支持 IE 8，您可搭配正则表达式使用 `replace()` 方法代替：\n\t> `str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '')`; \n+ 匹配：`string.match(regexp)`方法让字符串与一个正则表达式匹配。根据g表示来决定如何匹配，如果没有`g`表示，那么结果与`regexp.exec(string)`的结果相同。否则会生成包含所有匹配的数组。\n\n#### 多行字符串和模板字符串\nES6语法\n\n```javascript\n`这是一个\n多行\n字符串`;\n```\n\n```javascript\nvar name = '小明';\nvar age = 20;\nvar message = `你好, ${name}, 你今年${age}岁了!`;\nmessage === '你好,小明,你今年20岁了'; //true\n```\n### boolean\n布尔值只有`true`和`false`\n```javascript\ntrue; // 这是一个true值\nfalse; // 这是一个false值\n2 > 1; // 这是一个true值\n2 >= 3; // 这是一个false值\n```\n几个tips\n+ `NaN`这个特殊的Number与所有其他值都不相等，包括它自己\n```javascript\nNaN === NaN; // false\n```\n+ 唯一能判断`NaN`的方法是通过`isNaN()`函数：\n\n```javascript\nisNaN(NaN); // true\n```\n\n+ 最后要注意浮点数的相等比较：\n\n```javascript\n1 / 3 === (1 - 2 / 3); // false\n```\n\n> 这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：\n\n```javascript\nMath.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true\n```\n### null和undefined\n`null`表示一个“空”的值\n`undefined`表示值未定义\n\n> JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用null。undefined仅仅在判断函数参数是否传递的情况下有用。\n\n### 数组\n数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。\n\n```javascript\nvar misc = [1, 2, 3.14, 'Hello', null, true，['',''],{'':''}];\nmisc.length  //8\nmisc[0] //1\nmisc[8] //undefined\n```\n与大多数其他语言不同，JavaScript的数组没有上界\n```javascript\nvar myArray = [1,2,3,4,5];\nmyArray.length; // 5\nmyArray[10000] = true;\nmyArray.length; //10001\nmyArray.length = 3;//myArray是['1','2','3']\n```\n数组专题\n数组拥有方法 [查看](https://www.w3school.com.cn/js/js_array_methods.asp)\n数组的排序 [查看](https://www.w3school.com.cn/js/js_array_sort.asp)\n 数组的遍历 [查看](https://www.w3school.com.cn/js/js_array_iteration.asp)\n\n### 对象\nJavaScript的对象是一组由键-值组成的无序集合，例如：\n\n```javascript\nvar person = {\n    name: 'Bob',\n    age: 20,\n    tags: ['js', 'web', 'mobile'],\n    city: 'Beijing',\n    hasCar: true,\n    zipcode: null\n};\n```\n\n\n","source":"_posts/Javascript学习笔记.md","raw":"---\ntitle: Javascript学习笔记\ndate: 2020-02-11 16:26:09\nindex_img: /img/blogCovers/js1.jpg\ntags: [JavaScript]\ncategories: [学习笔记]\n---\n\n打算把最近学习的JavaScript写个博客整理记录一下，学习方式是《JavaScript语言精粹》这本书和[廖雪峰的博客](https://www.liaoxuefeng.com/wiki/1022910821149312)，不太明白的地方会去看《JavaScript权威指南》、[JavaScript|MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript)和[W3School](https://www.w3school.com.cn/js/index.asp)。\n## 数据类型\nJavaScript 变量能够保存多种数据类型：数值、字符串值、数组、对象等等：\n### Numbers\nJavaScript只有一种数字类型，不区分整型与浮点型，存储方式使用64位浮点数，1和1.0的值是相同的。\n```javascript\n123; // 整数123\n0.456; // 浮点数0.456\n1.2345e3; // 科学计数法表示1.2345x1000，等同于1234.5\n-99; // 负数\nNaN; // NaN表示Not a Number，当无法计算结果时用NaN表示，可以用isNaN检测NaN\nInfinity; // Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity\n```\n可以操作数字的方法 \n- 五个number方法 [查看](https://www.w3school.com.cn/js/js_number_methods.asp)\n\t* 将数字以字符串返回：`number.toString(radix)`,`radix`控制进制，默认十进制。\n\t* 将number转换为一个十进制形式的字符串，保留`fractionDigits`位小数（多余的四舍五入）：`number.toFixed(fractionDigits)`\n\t* 将number转换成为一个指数形式的字符串，保留`fractionDigits`位小数（多余的四舍五入）`number.toExponential（fractionDigits）`\n\t* 将number转换为一个十进制形式的字符串，保留`precision`个有效数字（多余的四舍五入）：`number.toPrecision(precision)`\n- 三个全局方法 [查看](https://www.w3school.com.cn/js/js_number_methods.asp)\n  * 可以将x转换为数字，x为任意JavaScript变量（日期，布尔值等）：`Number(x)`\n  * 解析一段字符串并返回整型数值（向下取整）。允许空格。只返回首个数字： `parseInt(string)`\n  * 解析一段字符串并返回数值。允许空格。只返回首个数字：`parseFloat(string)`\n- math对象方法执行数学数学任务 [查看](https://www.w3school.com.cn/js/js_math.asp)\n  * 返回x的四舍五入：`Math.round(x)`\n  * 返回x的y次幂：`Math.pow(x,y)`\n  * 返回x的平方根：`Math.sqrt(x)`\n  * 返回x的绝对值：`Math.abs(x)`\n  * x向上取整：`Math.ceil(x)`，x向下取整：`Math.floor(x)`\n  * x正弦余弦：`Math.sin(x)` , `Math.cos(x)`\n  * 最大最小值：`Math.min(1,,2,3,4) //1` ，`Math.max(1,2,3,4) //4`,[用于数组](https://www.cnblogs.com/lguow/p/9725258.html)\n  * 返回一个0-1的随机数：`Math.random()`，更多[随机数trick](https://www.w3school.com.cn/js/js_random.asp)\n\n### Strings\nJavaScript的字符串就是用`' '`或`\" \"`括起来的字符\n例：\n```javascript\n'I\\'m \\\"OK\\\"!';\n```\n含义`I'm \"OK\"!`\n>字符串一旦创建就不能改变，可以使用字符串方法操作返回新的字符串\n\n`\\`是转义字符 \n\n```javascript\n'A' === '\\u0041'; //true\n```\nstring有`length`属性\n```javascript\n'seven'.length; //5\n```\n可以用`+`号连接其他字符串来创建一个新的字符串\n```javascript\n'c'+'a'+'t' ==='cat'; //true\n```\nstring拥有方法 [查看](https://www.w3school.com.cn/js/js_string_methods.asp)\n\n+ 查找：`string.indexOf(searchString,position)` , `string.lastIndexOf(seachString,position)` , `string.search(regexp)`.\n`searchString`要搜索的字符串，`position`开始搜索的位置，`regexp`正则表达式对象，以number返回位置\n\n\t>  两种方法，`string.indexOf()` 与 `string.search()`，是相等的。\n\t> \n\t> 这两种方法是不相等的。区别在于：\n\t> \n\t> `string.search()` 方法无法设置第二个开始位置参数。 `string.indexOf()` 方法无法设置更强大的搜索值（正则表达式）。\n+ 提取字符：`string.charAt(position)` 方法返回字符串中指定下标（位置）的字符串。\n`string.charCodeAt(position)`方法返回字符串中指定索引的字符 unicode 编码，常用此方法建造哈希表，相反`string.fromCharCode(charCode...)`根据编码返回字符串\n\n\t>ECMAScript 5 (2009) 允许对字符串的属性访问 `[ ]`，如`str[0]`\n\t>用属性访问有点不太靠谱：\n\t> \n\t> 不适用 Internet Explorer 7 或更早的版本 它让字符串看起来像是数组（其实并不\t是） 如果找不到字符，`[ ]` 返回 `undefined`，而 `charAt()` 返回空字符串。 \n\t> 它是只读的。`str[0] = \"A\"` 不会产生错误（但也不会工作！）\n\t> 如果您希望按照数组的方式处理字符串，可以先把它转换为数组。\n+ 把字符串转换为数组：`string.split(separator,limit)`\n以`separator`分割，改参数可以是字符串或正则表达式，`limit`限制被分割的片段数量，返回元素为字符串的数组。\n+ 提取字符串：`string.slice(start, end)`，`string.substring(start, end)`，`string.substr(start, length)`\n`start`**开始**提取位置，`end`**最后**一个字符的位置，如果为负数则与`string.length`相加，即倒数位置，`length`要提取的字符串**长度**。\n不改变原字符串，将提取结果以新字符串返回。\n\n\t> `substring()` 类似于 `slice()`。不同之处在于 `substring()` 无法接受负的索引。\n\t> `substr()` 类似于 `slice()`。不同之处在于第二个参数规定被提取部分的长度。\n+ 替换：`replace(seachValue,replaceValue)`\n`seachValue`可以是**字符串**或**正则表达式**，`replaceValue`可以是**字符串**或一个**函数**。\n当`replaceValue`是一个**字符串**，字符`$`拥有特别含义：\n\n\t```javascript\n\tvar oldareacode = /\\((\\d{3})\\)/g;\n\tvar p = '(555)666-1212'.replace(oldareacode,'$1-');\n\t//p 是 '555-666-1212'\n\t```\n\t美元符号序列 |替换对象\n\t----|-----\n\t$`$$`|$\n\t$`$&`|整个匹配文本\n\t$`$number`|分组捕获的文本\n\t$``$` ``|匹配之前的文本\n\t$`$'`|匹配之后的文本\n\n\t如果`replaceValue`是一个**函数**，那么每次遇到一次匹配函数就会调用一次，该函数返回的字符串用作替换文本，在下一个参数是分组2捕获的文本、\n\t\n\n\t```javascript\n\tvar old = 'hello World';\n\tvar p = old.replace('hello',function (c){\n    \tconsole.log(c);//hello\n    \treturn 'Hello'    \n\t\t})\n\tconsole.log(p);//Hello World\n\t```\n\n\t>`replace()` 只替换首个匹配\n\t>默认地，`replace()` 对大小写敏感。\n\t>如需执行大小写不敏感的替换，请使用正则表达式 `/i`,请注意正则表达式不带引号。如：`replace(/he/i,'she')`\n\t>如需替换所有匹配，请使用正则表达式的 `/g` 标志（用于全局搜索)。如：`replace(/he/g,'she')`\n+ 转换大小写：`toUpperCase()`,`toLowerCase()`\n+ 连接字符串：`concat()`与`+`等效\n+ 删除字符串两端的空白符：`String.trim()`\n\t> Internet Explorer 8 或更低版本不支持 `trim()` 方法。\n\t> 如需支持 IE 8，您可搭配正则表达式使用 `replace()` 方法代替：\n\t> `str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '')`; \n+ 匹配：`string.match(regexp)`方法让字符串与一个正则表达式匹配。根据g表示来决定如何匹配，如果没有`g`表示，那么结果与`regexp.exec(string)`的结果相同。否则会生成包含所有匹配的数组。\n\n#### 多行字符串和模板字符串\nES6语法\n\n```javascript\n`这是一个\n多行\n字符串`;\n```\n\n```javascript\nvar name = '小明';\nvar age = 20;\nvar message = `你好, ${name}, 你今年${age}岁了!`;\nmessage === '你好,小明,你今年20岁了'; //true\n```\n### boolean\n布尔值只有`true`和`false`\n```javascript\ntrue; // 这是一个true值\nfalse; // 这是一个false值\n2 > 1; // 这是一个true值\n2 >= 3; // 这是一个false值\n```\n几个tips\n+ `NaN`这个特殊的Number与所有其他值都不相等，包括它自己\n```javascript\nNaN === NaN; // false\n```\n+ 唯一能判断`NaN`的方法是通过`isNaN()`函数：\n\n```javascript\nisNaN(NaN); // true\n```\n\n+ 最后要注意浮点数的相等比较：\n\n```javascript\n1 / 3 === (1 - 2 / 3); // false\n```\n\n> 这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：\n\n```javascript\nMath.abs(1 / 3 - (1 - 2 / 3)) < 0.0000001; // true\n```\n### null和undefined\n`null`表示一个“空”的值\n`undefined`表示值未定义\n\n> JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用null。undefined仅仅在判断函数参数是否传递的情况下有用。\n\n### 数组\n数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。\n\n```javascript\nvar misc = [1, 2, 3.14, 'Hello', null, true，['',''],{'':''}];\nmisc.length  //8\nmisc[0] //1\nmisc[8] //undefined\n```\n与大多数其他语言不同，JavaScript的数组没有上界\n```javascript\nvar myArray = [1,2,3,4,5];\nmyArray.length; // 5\nmyArray[10000] = true;\nmyArray.length; //10001\nmyArray.length = 3;//myArray是['1','2','3']\n```\n数组专题\n数组拥有方法 [查看](https://www.w3school.com.cn/js/js_array_methods.asp)\n数组的排序 [查看](https://www.w3school.com.cn/js/js_array_sort.asp)\n 数组的遍历 [查看](https://www.w3school.com.cn/js/js_array_iteration.asp)\n\n### 对象\nJavaScript的对象是一组由键-值组成的无序集合，例如：\n\n```javascript\nvar person = {\n    name: 'Bob',\n    age: 20,\n    tags: ['js', 'web', 'mobile'],\n    city: 'Beijing',\n    hasCar: true,\n    zipcode: null\n};\n```\n\n\n","slug":"Javascript学习笔记","published":1,"updated":"2021-10-23T08:33:46.716Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv5ff35t0001xgepaegu0pvk","content":"<p>打算把最近学习的JavaScript写个博客整理记录一下，学习方式是《JavaScript语言精粹》这本书和<a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312\">廖雪峰的博客</a>，不太明白的地方会去看《JavaScript权威指南》、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">JavaScript|MDN</a>和<a href=\"https://www.w3school.com.cn/js/index.asp\">W3School</a>。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>JavaScript 变量能够保存多种数据类型：数值、字符串值、数组、对象等等：</p>\n<h3 id=\"Numbers\"><a href=\"#Numbers\" class=\"headerlink\" title=\"Numbers\"></a>Numbers</h3><p>JavaScript只有一种数字类型，不区分整型与浮点型，存储方式使用64位浮点数，1和1.0的值是相同的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">123</span>; <span class=\"hljs-comment\">// 整数123</span><br><span class=\"hljs-number\">0.456</span>; <span class=\"hljs-comment\">// 浮点数0.456</span><br><span class=\"hljs-number\">1.2345e3</span>; <span class=\"hljs-comment\">// 科学计数法表示1.2345x1000，等同于1234.5</span><br>-<span class=\"hljs-number\">99</span>; <span class=\"hljs-comment\">// 负数</span><br><span class=\"hljs-literal\">NaN</span>; <span class=\"hljs-comment\">// NaN表示Not a Number，当无法计算结果时用NaN表示，可以用isNaN检测NaN</span><br><span class=\"hljs-literal\">Infinity</span>; <span class=\"hljs-comment\">// Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</span><br></code></pre></td></tr></table></figure>\n<p>可以操作数字的方法 </p>\n<ul>\n<li>五个number方法 <a href=\"https://www.w3school.com.cn/js/js_number_methods.asp\">查看</a><ul>\n<li>将数字以字符串返回：<code>number.toString(radix)</code>,<code>radix</code>控制进制，默认十进制。</li>\n<li>将number转换为一个十进制形式的字符串，保留<code>fractionDigits</code>位小数（多余的四舍五入）：<code>number.toFixed(fractionDigits)</code></li>\n<li>将number转换成为一个指数形式的字符串，保留<code>fractionDigits</code>位小数（多余的四舍五入）<code>number.toExponential（fractionDigits）</code></li>\n<li>将number转换为一个十进制形式的字符串，保留<code>precision</code>个有效数字（多余的四舍五入）：<code>number.toPrecision(precision)</code></li>\n</ul>\n</li>\n<li>三个全局方法 <a href=\"https://www.w3school.com.cn/js/js_number_methods.asp\">查看</a><ul>\n<li>可以将x转换为数字，x为任意JavaScript变量（日期，布尔值等）：<code>Number(x)</code></li>\n<li>解析一段字符串并返回整型数值（向下取整）。允许空格。只返回首个数字： <code>parseInt(string)</code></li>\n<li>解析一段字符串并返回数值。允许空格。只返回首个数字：<code>parseFloat(string)</code></li>\n</ul>\n</li>\n<li>math对象方法执行数学数学任务 <a href=\"https://www.w3school.com.cn/js/js_math.asp\">查看</a><ul>\n<li>返回x的四舍五入：<code>Math.round(x)</code></li>\n<li>返回x的y次幂：<code>Math.pow(x,y)</code></li>\n<li>返回x的平方根：<code>Math.sqrt(x)</code></li>\n<li>返回x的绝对值：<code>Math.abs(x)</code></li>\n<li>x向上取整：<code>Math.ceil(x)</code>，x向下取整：<code>Math.floor(x)</code></li>\n<li>x正弦余弦：<code>Math.sin(x)</code> , <code>Math.cos(x)</code></li>\n<li>最大最小值：<code>Math.min(1,,2,3,4) //1</code> ，<code>Math.max(1,2,3,4) //4</code>,<a href=\"https://www.cnblogs.com/lguow/p/9725258.html\">用于数组</a></li>\n<li>返回一个0-1的随机数：<code>Math.random()</code>，更多<a href=\"https://www.w3school.com.cn/js/js_random.asp\">随机数trick</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Strings\"><a href=\"#Strings\" class=\"headerlink\" title=\"Strings\"></a>Strings</h3><p>JavaScript的字符串就是用<code>&#39; &#39;</code>或<code>&quot; &quot;</code>括起来的字符<br>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;I\\&#x27;m \\&quot;OK\\&quot;!&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<p>含义<code>I&#39;m &quot;OK&quot;!</code></p>\n<blockquote>\n<p>字符串一旦创建就不能改变，可以使用字符串方法操作返回新的字符串</p>\n</blockquote>\n<p><code>\\</code>是转义字符 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;A&#x27;</span> === <span class=\"hljs-string\">&#x27;\\u0041&#x27;</span>; <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n<p>string有<code>length</code>属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;seven&#x27;</span>.length; <span class=\"hljs-comment\">//5</span><br></code></pre></td></tr></table></figure>\n<p>可以用<code>+</code>号连接其他字符串来创建一个新的字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;c&#x27;</span>+<span class=\"hljs-string\">&#x27;a&#x27;</span>+<span class=\"hljs-string\">&#x27;t&#x27;</span> ===<span class=\"hljs-string\">&#x27;cat&#x27;</span>; <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n<p>string拥有方法 <a href=\"https://www.w3school.com.cn/js/js_string_methods.asp\">查看</a></p>\n<ul>\n<li><p>查找：<code>string.indexOf(searchString,position)</code> , <code>string.lastIndexOf(seachString,position)</code> , <code>string.search(regexp)</code>.<br><code>searchString</code>要搜索的字符串，<code>position</code>开始搜索的位置，<code>regexp</code>正则表达式对象，以number返回位置</p>\n<blockquote>\n<p> 两种方法，<code>string.indexOf()</code> 与 <code>string.search()</code>，是相等的。</p>\n<p>这两种方法是不相等的。区别在于：</p>\n<p><code>string.search()</code> 方法无法设置第二个开始位置参数。 <code>string.indexOf()</code> 方法无法设置更强大的搜索值（正则表达式）。</p>\n</blockquote>\n</li>\n<li><p>提取字符：<code>string.charAt(position)</code> 方法返回字符串中指定下标（位置）的字符串。<br><code>string.charCodeAt(position)</code>方法返回字符串中指定索引的字符 unicode 编码，常用此方法建造哈希表，相反<code>string.fromCharCode(charCode...)</code>根据编码返回字符串</p>\n<blockquote>\n<p>ECMAScript 5 (2009) 允许对字符串的属性访问 <code>[ ]</code>，如<code>str[0]</code><br>用属性访问有点不太靠谱：</p>\n<p>不适用 Internet Explorer 7 或更早的版本 它让字符串看起来像是数组（其实并不    是） 如果找不到字符，<code>[ ]</code> 返回 <code>undefined</code>，而 <code>charAt()</code> 返回空字符串。<br>它是只读的。<code>str[0] = &quot;A&quot;</code> 不会产生错误（但也不会工作！）<br>如果您希望按照数组的方式处理字符串，可以先把它转换为数组。</p>\n</blockquote>\n</li>\n<li><p>把字符串转换为数组：<code>string.split(separator,limit)</code><br>以<code>separator</code>分割，改参数可以是字符串或正则表达式，<code>limit</code>限制被分割的片段数量，返回元素为字符串的数组。</p>\n</li>\n<li><p>提取字符串：<code>string.slice(start, end)</code>，<code>string.substring(start, end)</code>，<code>string.substr(start, length)</code><br><code>start</code><strong>开始</strong>提取位置，<code>end</code><strong>最后</strong>一个字符的位置，如果为负数则与<code>string.length</code>相加，即倒数位置，<code>length</code>要提取的字符串<strong>长度</strong>。<br>不改变原字符串，将提取结果以新字符串返回。</p>\n<blockquote>\n<p><code>substring()</code> 类似于 <code>slice()</code>。不同之处在于 <code>substring()</code> 无法接受负的索引。<br><code>substr()</code> 类似于 <code>slice()</code>。不同之处在于第二个参数规定被提取部分的长度。</p>\n</blockquote>\n</li>\n<li><p>替换：<code>replace(seachValue,replaceValue)</code><br><code>seachValue</code>可以是<strong>字符串</strong>或<strong>正则表达式</strong>，<code>replaceValue</code>可以是<strong>字符串</strong>或一个<strong>函数</strong>。<br>当<code>replaceValue</code>是一个<strong>字符串</strong>，字符<code>$</code>拥有特别含义：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> oldareacode = <span class=\"hljs-regexp\">/\\((\\d&#123;3&#125;)\\)/g</span>;<br><span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-string\">&#x27;(555)666-1212&#x27;</span>.replace(oldareacode,<span class=\"hljs-string\">&#x27;$1-&#x27;</span>);<br><span class=\"hljs-comment\">//p 是 &#x27;555-666-1212&#x27;</span><br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>美元符号序列</th>\n<th>替换对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$<code>$$</code></td>\n<td>$</td>\n</tr>\n<tr>\n<td>$<code>$&amp;</code></td>\n<td>整个匹配文本</td>\n</tr>\n<tr>\n<td>$<code>$number</code></td>\n<td>分组捕获的文本</td>\n</tr>\n<tr>\n<td>$<code>$` </code></td>\n<td>匹配之前的文本</td>\n</tr>\n<tr>\n<td>$<code>$&#39;</code></td>\n<td>匹配之后的文本</td>\n</tr>\n</tbody></table>\n<p>  如果<code>replaceValue</code>是一个<strong>函数</strong>，那么每次遇到一次匹配函数就会调用一次，该函数返回的字符串用作替换文本，在下一个参数是分组2捕获的文本、</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> old = <span class=\"hljs-string\">&#x27;hello World&#x27;</span>;<br><span class=\"hljs-keyword\">var</span> p = old.replace(<span class=\"hljs-string\">&#x27;hello&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">c</span>)</span>&#123;<br>   \t<span class=\"hljs-built_in\">console</span>.log(c);<span class=\"hljs-comment\">//hello</span><br>   \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Hello&#x27;</span>    <br>\t&#125;)<br><span class=\"hljs-built_in\">console</span>.log(p);<span class=\"hljs-comment\">//Hello World</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>replace()</code> 只替换首个匹配<br>默认地，<code>replace()</code> 对大小写敏感。<br>如需执行大小写不敏感的替换，请使用正则表达式 <code>/i</code>,请注意正则表达式不带引号。如：<code>replace(/he/i,&#39;she&#39;)</code><br>如需替换所有匹配，请使用正则表达式的 <code>/g</code> 标志（用于全局搜索)。如：<code>replace(/he/g,&#39;she&#39;)</code></p>\n</blockquote>\n</li>\n<li><p>转换大小写：<code>toUpperCase()</code>,<code>toLowerCase()</code></p>\n</li>\n<li><p>连接字符串：<code>concat()</code>与<code>+</code>等效</p>\n</li>\n<li><p>删除字符串两端的空白符：<code>String.trim()</code></p>\n<blockquote>\n<p>Internet Explorer 8 或更低版本不支持 <code>trim()</code> 方法。<br>如需支持 IE 8，您可搭配正则表达式使用 <code>replace()</code> 方法代替：<br><code>str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, &#39;&#39;)</code>; </p>\n</blockquote>\n</li>\n<li><p>匹配：<code>string.match(regexp)</code>方法让字符串与一个正则表达式匹配。根据g表示来决定如何匹配，如果没有<code>g</code>表示，那么结果与<code>regexp.exec(string)</code>的结果相同。否则会生成包含所有匹配的数组。</p>\n</li>\n</ul>\n<h4 id=\"多行字符串和模板字符串\"><a href=\"#多行字符串和模板字符串\" class=\"headerlink\" title=\"多行字符串和模板字符串\"></a>多行字符串和模板字符串</h4><p>ES6语法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">`这是一个</span><br><span class=\"hljs-string\">多行</span><br><span class=\"hljs-string\">字符串`</span>;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&#x27;小明&#x27;</span>;<br><span class=\"hljs-keyword\">var</span> age = <span class=\"hljs-number\">20</span>;<br><span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">`你好, <span class=\"hljs-subst\">$&#123;name&#125;</span>, 你今年<span class=\"hljs-subst\">$&#123;age&#125;</span>岁了!`</span>;<br>message === <span class=\"hljs-string\">&#x27;你好,小明,你今年20岁了&#x27;</span>; <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h3><p>布尔值只有<code>true</code>和<code>false</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 这是一个true值</span><br><span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// 这是一个false值</span><br><span class=\"hljs-number\">2</span> &gt; <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 这是一个true值</span><br><span class=\"hljs-number\">2</span> &gt;= <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">// 这是一个false值</span><br></code></pre></td></tr></table></figure>\n<p>几个tips</p>\n<ul>\n<li><code>NaN</code>这个特殊的Number与所有其他值都不相等，包括它自己<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-literal\">NaN</span> === <span class=\"hljs-literal\">NaN</span>; <span class=\"hljs-comment\">// false</span><br></code></pre></td></tr></table></figure></li>\n<li>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>最后要注意浮点数的相等比较：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">3</span> === (<span class=\"hljs-number\">1</span> - <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// false</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Math</span>.abs(<span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">3</span> - (<span class=\"hljs-number\">1</span> - <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span>)) &lt; <span class=\"hljs-number\">0.0000001</span>; <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"null和undefined\"><a href=\"#null和undefined\" class=\"headerlink\" title=\"null和undefined\"></a>null和undefined</h3><p><code>null</code>表示一个“空”的值<br><code>undefined</code>表示值未定义</p>\n<blockquote>\n<p>JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用null。undefined仅仅在判断函数参数是否传递的情况下有用。</p>\n</blockquote>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> misc = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3.14</span>, <span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">true</span>，[<span class=\"hljs-string\">&#x27;&#x27;</span>,<span class=\"hljs-string\">&#x27;&#x27;</span>],&#123;<span class=\"hljs-string\">&#x27;&#x27;</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>&#125;];<br>misc.length  <span class=\"hljs-comment\">//8</span><br>misc[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">//1</span><br>misc[<span class=\"hljs-number\">8</span>] <span class=\"hljs-comment\">//undefined</span><br></code></pre></td></tr></table></figure>\n<p>与大多数其他语言不同，JavaScript的数组没有上界</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> myArray = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];<br>myArray.length; <span class=\"hljs-comment\">// 5</span><br>myArray[<span class=\"hljs-number\">10000</span>] = <span class=\"hljs-literal\">true</span>;<br>myArray.length; <span class=\"hljs-comment\">//10001</span><br>myArray.length = <span class=\"hljs-number\">3</span>;<span class=\"hljs-comment\">//myArray是[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br></code></pre></td></tr></table></figure>\n<p>数组专题<br>数组拥有方法 <a href=\"https://www.w3school.com.cn/js/js_array_methods.asp\">查看</a><br>数组的排序 <a href=\"https://www.w3school.com.cn/js/js_array_sort.asp\">查看</a><br> 数组的遍历 <a href=\"https://www.w3school.com.cn/js/js_array_iteration.asp\">查看</a></p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>JavaScript的对象是一组由键-值组成的无序集合，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> person = &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Bob&#x27;</span>,<br>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span>,<br>    <span class=\"hljs-attr\">tags</span>: [<span class=\"hljs-string\">&#x27;js&#x27;</span>, <span class=\"hljs-string\">&#x27;web&#x27;</span>, <span class=\"hljs-string\">&#x27;mobile&#x27;</span>],<br>    <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&#x27;Beijing&#x27;</span>,<br>    <span class=\"hljs-attr\">hasCar</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">zipcode</span>: <span class=\"hljs-literal\">null</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"wordcount":4823,"excerpt":"","more":"<p>打算把最近学习的JavaScript写个博客整理记录一下，学习方式是《JavaScript语言精粹》这本书和<a href=\"https://www.liaoxuefeng.com/wiki/1022910821149312\">廖雪峰的博客</a>，不太明白的地方会去看《JavaScript权威指南》、<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">JavaScript|MDN</a>和<a href=\"https://www.w3school.com.cn/js/index.asp\">W3School</a>。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>JavaScript 变量能够保存多种数据类型：数值、字符串值、数组、对象等等：</p>\n<h3 id=\"Numbers\"><a href=\"#Numbers\" class=\"headerlink\" title=\"Numbers\"></a>Numbers</h3><p>JavaScript只有一种数字类型，不区分整型与浮点型，存储方式使用64位浮点数，1和1.0的值是相同的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">123</span>; <span class=\"hljs-comment\">// 整数123</span><br><span class=\"hljs-number\">0.456</span>; <span class=\"hljs-comment\">// 浮点数0.456</span><br><span class=\"hljs-number\">1.2345e3</span>; <span class=\"hljs-comment\">// 科学计数法表示1.2345x1000，等同于1234.5</span><br>-<span class=\"hljs-number\">99</span>; <span class=\"hljs-comment\">// 负数</span><br><span class=\"hljs-literal\">NaN</span>; <span class=\"hljs-comment\">// NaN表示Not a Number，当无法计算结果时用NaN表示，可以用isNaN检测NaN</span><br><span class=\"hljs-literal\">Infinity</span>; <span class=\"hljs-comment\">// Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</span><br></code></pre></td></tr></table></figure>\n<p>可以操作数字的方法 </p>\n<ul>\n<li>五个number方法 <a href=\"https://www.w3school.com.cn/js/js_number_methods.asp\">查看</a><ul>\n<li>将数字以字符串返回：<code>number.toString(radix)</code>,<code>radix</code>控制进制，默认十进制。</li>\n<li>将number转换为一个十进制形式的字符串，保留<code>fractionDigits</code>位小数（多余的四舍五入）：<code>number.toFixed(fractionDigits)</code></li>\n<li>将number转换成为一个指数形式的字符串，保留<code>fractionDigits</code>位小数（多余的四舍五入）<code>number.toExponential（fractionDigits）</code></li>\n<li>将number转换为一个十进制形式的字符串，保留<code>precision</code>个有效数字（多余的四舍五入）：<code>number.toPrecision(precision)</code></li>\n</ul>\n</li>\n<li>三个全局方法 <a href=\"https://www.w3school.com.cn/js/js_number_methods.asp\">查看</a><ul>\n<li>可以将x转换为数字，x为任意JavaScript变量（日期，布尔值等）：<code>Number(x)</code></li>\n<li>解析一段字符串并返回整型数值（向下取整）。允许空格。只返回首个数字： <code>parseInt(string)</code></li>\n<li>解析一段字符串并返回数值。允许空格。只返回首个数字：<code>parseFloat(string)</code></li>\n</ul>\n</li>\n<li>math对象方法执行数学数学任务 <a href=\"https://www.w3school.com.cn/js/js_math.asp\">查看</a><ul>\n<li>返回x的四舍五入：<code>Math.round(x)</code></li>\n<li>返回x的y次幂：<code>Math.pow(x,y)</code></li>\n<li>返回x的平方根：<code>Math.sqrt(x)</code></li>\n<li>返回x的绝对值：<code>Math.abs(x)</code></li>\n<li>x向上取整：<code>Math.ceil(x)</code>，x向下取整：<code>Math.floor(x)</code></li>\n<li>x正弦余弦：<code>Math.sin(x)</code> , <code>Math.cos(x)</code></li>\n<li>最大最小值：<code>Math.min(1,,2,3,4) //1</code> ，<code>Math.max(1,2,3,4) //4</code>,<a href=\"https://www.cnblogs.com/lguow/p/9725258.html\">用于数组</a></li>\n<li>返回一个0-1的随机数：<code>Math.random()</code>，更多<a href=\"https://www.w3school.com.cn/js/js_random.asp\">随机数trick</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Strings\"><a href=\"#Strings\" class=\"headerlink\" title=\"Strings\"></a>Strings</h3><p>JavaScript的字符串就是用<code>&#39; &#39;</code>或<code>&quot; &quot;</code>括起来的字符<br>例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;I\\&#x27;m \\&quot;OK\\&quot;!&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<p>含义<code>I&#39;m &quot;OK&quot;!</code></p>\n<blockquote>\n<p>字符串一旦创建就不能改变，可以使用字符串方法操作返回新的字符串</p>\n</blockquote>\n<p><code>\\</code>是转义字符 </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;A&#x27;</span> === <span class=\"hljs-string\">&#x27;\\u0041&#x27;</span>; <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n<p>string有<code>length</code>属性</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;seven&#x27;</span>.length; <span class=\"hljs-comment\">//5</span><br></code></pre></td></tr></table></figure>\n<p>可以用<code>+</code>号连接其他字符串来创建一个新的字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">&#x27;c&#x27;</span>+<span class=\"hljs-string\">&#x27;a&#x27;</span>+<span class=\"hljs-string\">&#x27;t&#x27;</span> ===<span class=\"hljs-string\">&#x27;cat&#x27;</span>; <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n<p>string拥有方法 <a href=\"https://www.w3school.com.cn/js/js_string_methods.asp\">查看</a></p>\n<ul>\n<li><p>查找：<code>string.indexOf(searchString,position)</code> , <code>string.lastIndexOf(seachString,position)</code> , <code>string.search(regexp)</code>.<br><code>searchString</code>要搜索的字符串，<code>position</code>开始搜索的位置，<code>regexp</code>正则表达式对象，以number返回位置</p>\n<blockquote>\n<p> 两种方法，<code>string.indexOf()</code> 与 <code>string.search()</code>，是相等的。</p>\n<p>这两种方法是不相等的。区别在于：</p>\n<p><code>string.search()</code> 方法无法设置第二个开始位置参数。 <code>string.indexOf()</code> 方法无法设置更强大的搜索值（正则表达式）。</p>\n</blockquote>\n</li>\n<li><p>提取字符：<code>string.charAt(position)</code> 方法返回字符串中指定下标（位置）的字符串。<br><code>string.charCodeAt(position)</code>方法返回字符串中指定索引的字符 unicode 编码，常用此方法建造哈希表，相反<code>string.fromCharCode(charCode...)</code>根据编码返回字符串</p>\n<blockquote>\n<p>ECMAScript 5 (2009) 允许对字符串的属性访问 <code>[ ]</code>，如<code>str[0]</code><br>用属性访问有点不太靠谱：</p>\n<p>不适用 Internet Explorer 7 或更早的版本 它让字符串看起来像是数组（其实并不    是） 如果找不到字符，<code>[ ]</code> 返回 <code>undefined</code>，而 <code>charAt()</code> 返回空字符串。<br>它是只读的。<code>str[0] = &quot;A&quot;</code> 不会产生错误（但也不会工作！）<br>如果您希望按照数组的方式处理字符串，可以先把它转换为数组。</p>\n</blockquote>\n</li>\n<li><p>把字符串转换为数组：<code>string.split(separator,limit)</code><br>以<code>separator</code>分割，改参数可以是字符串或正则表达式，<code>limit</code>限制被分割的片段数量，返回元素为字符串的数组。</p>\n</li>\n<li><p>提取字符串：<code>string.slice(start, end)</code>，<code>string.substring(start, end)</code>，<code>string.substr(start, length)</code><br><code>start</code><strong>开始</strong>提取位置，<code>end</code><strong>最后</strong>一个字符的位置，如果为负数则与<code>string.length</code>相加，即倒数位置，<code>length</code>要提取的字符串<strong>长度</strong>。<br>不改变原字符串，将提取结果以新字符串返回。</p>\n<blockquote>\n<p><code>substring()</code> 类似于 <code>slice()</code>。不同之处在于 <code>substring()</code> 无法接受负的索引。<br><code>substr()</code> 类似于 <code>slice()</code>。不同之处在于第二个参数规定被提取部分的长度。</p>\n</blockquote>\n</li>\n<li><p>替换：<code>replace(seachValue,replaceValue)</code><br><code>seachValue</code>可以是<strong>字符串</strong>或<strong>正则表达式</strong>，<code>replaceValue</code>可以是<strong>字符串</strong>或一个<strong>函数</strong>。<br>当<code>replaceValue</code>是一个<strong>字符串</strong>，字符<code>$</code>拥有特别含义：</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> oldareacode = <span class=\"hljs-regexp\">/\\((\\d&#123;3&#125;)\\)/g</span>;<br><span class=\"hljs-keyword\">var</span> p = <span class=\"hljs-string\">&#x27;(555)666-1212&#x27;</span>.replace(oldareacode,<span class=\"hljs-string\">&#x27;$1-&#x27;</span>);<br><span class=\"hljs-comment\">//p 是 &#x27;555-666-1212&#x27;</span><br></code></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>美元符号序列</th>\n<th>替换对象</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$<code>$$</code></td>\n<td>$</td>\n</tr>\n<tr>\n<td>$<code>$&amp;</code></td>\n<td>整个匹配文本</td>\n</tr>\n<tr>\n<td>$<code>$number</code></td>\n<td>分组捕获的文本</td>\n</tr>\n<tr>\n<td>$<code>$` </code></td>\n<td>匹配之前的文本</td>\n</tr>\n<tr>\n<td>$<code>$&#39;</code></td>\n<td>匹配之后的文本</td>\n</tr>\n</tbody></table>\n<p>  如果<code>replaceValue</code>是一个<strong>函数</strong>，那么每次遇到一次匹配函数就会调用一次，该函数返回的字符串用作替换文本，在下一个参数是分组2捕获的文本、</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> old = <span class=\"hljs-string\">&#x27;hello World&#x27;</span>;<br><span class=\"hljs-keyword\">var</span> p = old.replace(<span class=\"hljs-string\">&#x27;hello&#x27;</span>,<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">c</span>)</span>&#123;<br>   \t<span class=\"hljs-built_in\">console</span>.log(c);<span class=\"hljs-comment\">//hello</span><br>   \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;Hello&#x27;</span>    <br>\t&#125;)<br><span class=\"hljs-built_in\">console</span>.log(p);<span class=\"hljs-comment\">//Hello World</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>replace()</code> 只替换首个匹配<br>默认地，<code>replace()</code> 对大小写敏感。<br>如需执行大小写不敏感的替换，请使用正则表达式 <code>/i</code>,请注意正则表达式不带引号。如：<code>replace(/he/i,&#39;she&#39;)</code><br>如需替换所有匹配，请使用正则表达式的 <code>/g</code> 标志（用于全局搜索)。如：<code>replace(/he/g,&#39;she&#39;)</code></p>\n</blockquote>\n</li>\n<li><p>转换大小写：<code>toUpperCase()</code>,<code>toLowerCase()</code></p>\n</li>\n<li><p>连接字符串：<code>concat()</code>与<code>+</code>等效</p>\n</li>\n<li><p>删除字符串两端的空白符：<code>String.trim()</code></p>\n<blockquote>\n<p>Internet Explorer 8 或更低版本不支持 <code>trim()</code> 方法。<br>如需支持 IE 8，您可搭配正则表达式使用 <code>replace()</code> 方法代替：<br><code>str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, &#39;&#39;)</code>; </p>\n</blockquote>\n</li>\n<li><p>匹配：<code>string.match(regexp)</code>方法让字符串与一个正则表达式匹配。根据g表示来决定如何匹配，如果没有<code>g</code>表示，那么结果与<code>regexp.exec(string)</code>的结果相同。否则会生成包含所有匹配的数组。</p>\n</li>\n</ul>\n<h4 id=\"多行字符串和模板字符串\"><a href=\"#多行字符串和模板字符串\" class=\"headerlink\" title=\"多行字符串和模板字符串\"></a>多行字符串和模板字符串</h4><p>ES6语法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-string\">`这是一个</span><br><span class=\"hljs-string\">多行</span><br><span class=\"hljs-string\">字符串`</span>;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&#x27;小明&#x27;</span>;<br><span class=\"hljs-keyword\">var</span> age = <span class=\"hljs-number\">20</span>;<br><span class=\"hljs-keyword\">var</span> message = <span class=\"hljs-string\">`你好, <span class=\"hljs-subst\">$&#123;name&#125;</span>, 你今年<span class=\"hljs-subst\">$&#123;age&#125;</span>岁了!`</span>;<br>message === <span class=\"hljs-string\">&#x27;你好,小明,你今年20岁了&#x27;</span>; <span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"boolean\"><a href=\"#boolean\" class=\"headerlink\" title=\"boolean\"></a>boolean</h3><p>布尔值只有<code>true</code>和<code>false</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-literal\">true</span>; <span class=\"hljs-comment\">// 这是一个true值</span><br><span class=\"hljs-literal\">false</span>; <span class=\"hljs-comment\">// 这是一个false值</span><br><span class=\"hljs-number\">2</span> &gt; <span class=\"hljs-number\">1</span>; <span class=\"hljs-comment\">// 这是一个true值</span><br><span class=\"hljs-number\">2</span> &gt;= <span class=\"hljs-number\">3</span>; <span class=\"hljs-comment\">// 这是一个false值</span><br></code></pre></td></tr></table></figure>\n<p>几个tips</p>\n<ul>\n<li><code>NaN</code>这个特殊的Number与所有其他值都不相等，包括它自己<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-literal\">NaN</span> === <span class=\"hljs-literal\">NaN</span>; <span class=\"hljs-comment\">// false</span><br></code></pre></td></tr></table></figure></li>\n<li>唯一能判断<code>NaN</code>的方法是通过<code>isNaN()</code>函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">isNaN</span>(<span class=\"hljs-literal\">NaN</span>); <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>最后要注意浮点数的相等比较：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">3</span> === (<span class=\"hljs-number\">1</span> - <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// false</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这不是JavaScript的设计缺陷。浮点数在运算过程中会产生误差，因为计算机无法精确表示无限循环小数。要比较两个浮点数是否相等，只能计算它们之差的绝对值，看是否小于某个阈值：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-built_in\">Math</span>.abs(<span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">3</span> - (<span class=\"hljs-number\">1</span> - <span class=\"hljs-number\">2</span> / <span class=\"hljs-number\">3</span>)) &lt; <span class=\"hljs-number\">0.0000001</span>; <span class=\"hljs-comment\">// true</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"null和undefined\"><a href=\"#null和undefined\" class=\"headerlink\" title=\"null和undefined\"></a>null和undefined</h3><p><code>null</code>表示一个“空”的值<br><code>undefined</code>表示值未定义</p>\n<blockquote>\n<p>JavaScript的设计者希望用null表示一个空的值，而undefined表示值未定义。事实证明，这并没有什么卵用，区分两者的意义不大。大多数情况下，我们都应该用null。undefined仅仅在判断函数参数是否传递的情况下有用。</p>\n</blockquote>\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><p>数组是一组按顺序排列的集合，集合的每个值称为元素。JavaScript的数组可以包括任意数据类型。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> misc = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3.14</span>, <span class=\"hljs-string\">&#x27;Hello&#x27;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">true</span>，[<span class=\"hljs-string\">&#x27;&#x27;</span>,<span class=\"hljs-string\">&#x27;&#x27;</span>],&#123;<span class=\"hljs-string\">&#x27;&#x27;</span>:<span class=\"hljs-string\">&#x27;&#x27;</span>&#125;];<br>misc.length  <span class=\"hljs-comment\">//8</span><br>misc[<span class=\"hljs-number\">0</span>] <span class=\"hljs-comment\">//1</span><br>misc[<span class=\"hljs-number\">8</span>] <span class=\"hljs-comment\">//undefined</span><br></code></pre></td></tr></table></figure>\n<p>与大多数其他语言不同，JavaScript的数组没有上界</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> myArray = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>];<br>myArray.length; <span class=\"hljs-comment\">// 5</span><br>myArray[<span class=\"hljs-number\">10000</span>] = <span class=\"hljs-literal\">true</span>;<br>myArray.length; <span class=\"hljs-comment\">//10001</span><br>myArray.length = <span class=\"hljs-number\">3</span>;<span class=\"hljs-comment\">//myArray是[&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span><br></code></pre></td></tr></table></figure>\n<p>数组专题<br>数组拥有方法 <a href=\"https://www.w3school.com.cn/js/js_array_methods.asp\">查看</a><br>数组的排序 <a href=\"https://www.w3school.com.cn/js/js_array_sort.asp\">查看</a><br> 数组的遍历 <a href=\"https://www.w3school.com.cn/js/js_array_iteration.asp\">查看</a></p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>JavaScript的对象是一组由键-值组成的无序集合，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> person = &#123;<br>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;Bob&#x27;</span>,<br>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">20</span>,<br>    <span class=\"hljs-attr\">tags</span>: [<span class=\"hljs-string\">&#x27;js&#x27;</span>, <span class=\"hljs-string\">&#x27;web&#x27;</span>, <span class=\"hljs-string\">&#x27;mobile&#x27;</span>],<br>    <span class=\"hljs-attr\">city</span>: <span class=\"hljs-string\">&#x27;Beijing&#x27;</span>,<br>    <span class=\"hljs-attr\">hasCar</span>: <span class=\"hljs-literal\">true</span>,<br>    <span class=\"hljs-attr\">zipcode</span>: <span class=\"hljs-literal\">null</span><br>&#125;;<br></code></pre></td></tr></table></figure>\n\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckv5ff35t0001xgepaegu0pvk","category_id":"ckv5ff35w0002xgep6dqgdmdf","_id":"ckv5ff35y0005xgep88939b19"}],"PostTag":[{"post_id":"ckv5ff35t0001xgepaegu0pvk","tag_id":"ckv5ff35x0003xgep5x6a5kem","_id":"ckv5ff35y0004xgepe03tfso6"}],"Tag":[{"name":"JavaScript","_id":"ckv5ff35x0003xgep5x6a5kem"}]}}